<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <!-- Add Liquibase lock table -->
    <changeSet id="000" author="developer" context="production">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="databasechangeloglock"/>
            </not>
        </preConditions>
        
        <createTable tableName="databasechangeloglock">
            <column name="id" type="int">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="locked" type="boolean" defaultValueBoolean="false">
                <constraints nullable="false"/>
            </column>
            <column name="lockgranted" type="timestamp"/>
            <column name="lockedby" type="varchar(255)"/>
        </createTable>
        
        <insert tableName="databasechangeloglock">
            <column name="id" value="1"/>
            <column name="locked" valueBoolean="false"/>
        </insert>
    </changeSet>

    <changeSet id="001" author="developer" context="production">
        <comment>Initial database setup</comment>
        
        <!-- Create ENUM types -->
        <sql>
            CREATE TYPE operationtype AS ENUM ('DEPOSIT', 'WITHDRAW');
            CREATE TYPE transactionstatus AS ENUM ('PENDING', 'SUCCESS', 'FAILED');
        </sql>
        
        <!-- Wallets table -->
        <createTable tableName="wallets" remarks="Table for storing wallet information">
            <column name="id" type="UUID">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="balance" type="DECIMAL(18,2)" defaultValueNumeric="0">
                <constraints nullable="false"/>
            </column>
            <column name="created_at" type="TIMESTAMP WITH TIME ZONE" defaultValueComputed="CURRENT_TIMESTAMP">
                <constraints nullable="false"/>
            </column>
            <column name="updated_at" type="TIMESTAMP WITH TIME ZONE" defaultValueComputed="CURRENT_TIMESTAMP">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <!-- Transactions table -->
        <createTable tableName="transactions" remarks="Table for storing transaction history">
            <column name="id" type="UUID">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="wallet_id" type="UUID">
                <constraints nullable="false"
                           foreignKeyName="fk_transactions_wallet"
                           references="wallets(id)"
                           deleteCascade="false"/>
            </column>
            <column name="operation_type" type="operationtype">
                <constraints nullable="false"/>
            </column>
            <column name="amount" type="DECIMAL(18,2)">
                <constraints nullable="false"/>
            </column>
            <column name="status" type="transactionstatus" defaultValue="PENDING">
                <constraints nullable="false"/>
            </column>
            <column name="created_at" type="TIMESTAMP WITH TIME ZONE" defaultValueComputed="CURRENT_TIMESTAMP">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <!-- Regular indexes -->
        <sql>
            -- Indexes for wallets
            CREATE INDEX IF NOT EXISTS idx_wallets_balance ON wallets (balance);
            CREATE INDEX IF NOT EXISTS idx_wallets_updated_at ON wallets (updated_at);
            
            -- Indexes for transactions
            CREATE INDEX IF NOT EXISTS idx_transactions_wallet_id ON transactions (wallet_id);
            CREATE INDEX IF NOT EXISTS idx_transactions_created_at ON transactions (created_at);
            CREATE INDEX IF NOT EXISTS idx_transactions_wallet_status ON transactions (wallet_id, status);
            CREATE INDEX IF NOT EXISTS idx_transactions_operation_type ON transactions (operation_type);
        </sql>

        <rollback>
            DROP TABLE IF EXISTS transactions;
            DROP TABLE IF EXISTS wallets;
            DROP TYPE IF EXISTS operationtype;
            DROP TYPE IF EXISTS transactionstatus;
        </rollback>
    </changeSet>

    <changeSet id="002" author="developer" runInTransaction="false">
        <sql>
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_wallets_balance_ops 
            ON wallets USING btree (id, balance) 
            WHERE deleted_at IS NULL;
        </sql>
    </changeSet>

</databaseChangeLog>
