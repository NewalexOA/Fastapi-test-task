services:
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: '4G'
        reservations:
          cpus: '2'
          memory: '2G'

  liquibase:
    image: liquibase/liquibase:4.25
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./liquibase:/workspace
    working_dir: /workspace
    command: >
      --changelog-file=changelog/changelog.xml
      --labels="!test"
      --defaultsFile=/workspace/liquibase.properties
      update
    environment:
      - LIQUIBASE_COMMAND_USERNAME=${POSTGRES_USER}
      - LIQUIBASE_COMMAND_PASSWORD=${POSTGRES_PASSWORD}
      - LIQUIBASE_COMMAND_URL=jdbc:postgresql://db:5432/${POSTGRES_DB}

  app:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
      pgbouncer:
        condition: service_started
      liquibase:
        condition: service_completed_successfully
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - PYTHONUNBUFFERED=1
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - LIQUIBASE_COMMAND_URL=jdbc:postgresql://db:5432/${POSTGRES_DB}
      - LIQUIBASE_COMMAND_USERNAME=${POSTGRES_USER}
      - LIQUIBASE_COMMAND_PASSWORD=${POSTGRES_PASSWORD}
      - WAIT_FOR_MIGRATIONS=true
    volumes:
      - ./liquibase:/liquibase
      - ./app:/app/app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  locust:
    image: locustio/locust
    ports:
      - "8089:8089"
    volumes:
      - ./tests:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host http://app:8000/api/v1
    depends_on:
      - app

  pgbouncer:
    image: edoburu/pgbouncer
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_NAME=${POSTGRES_DB}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=20
    ports:
      - "6432:6432"
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
    command: >
      /bin/sh -c "
      apt-get update && apt-get install -y dos2unix &&
      ls -la /generate-userlist.sh.ro &&
      mkdir -p /tmp/pgbouncer &&
      cp -v /generate-userlist.sh.ro /tmp/pgbouncer/generate-userlist.sh &&
      ls -la /tmp/pgbouncer &&
      chmod +x /tmp/pgbouncer/generate-userlist.sh &&
      dos2unix /tmp/pgbouncer/generate-userlist.sh &&
      cat /tmp/pgbouncer/generate-userlist.sh &&
      /tmp/pgbouncer/generate-userlist.sh &&
      pgbouncer /etc/pgbouncer/pgbouncer.ini"
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/generate-userlist.sh:/generate-userlist.sh.ro:ro
      - pgbouncer_data:/etc/pgbouncer
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 6432"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME}_db_data
  pgbouncer_data:
    name: ${COMPOSE_PROJECT_NAME}_pgbouncer_data

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}_network
    driver: bridge
